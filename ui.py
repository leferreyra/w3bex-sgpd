#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Mar 18 17:37:36 2012

import wx, datetime, printer, webbrowser
from sgpd import *
from wx.lib.mixins.listctrl import ListCtrlAutoWidthMixin


data = Data()
data.load()

Clientes = data.objects['clientes']
Cobradores = data.objects['cobradores']
Pagos = data.objects ['pagos']

# Custom WIDGETS!-----------------------

class AutoWidthList(wx.ListCtrl, ListCtrlAutoWidthMixin):
        def __init__(self, parent):
                wx.ListCtrl.__init__(self, parent, -1, style=wx.LC_REPORT)
                ListCtrlAutoWidthMixin.__init__(self)

# --------------------------------------


class PagosFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PagosFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_10 = wx.Panel(self, -1)
        self.list_pagos = AutoWidthList(self.panel_10)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        self.list_pagos.InsertColumn(0, "Fecha", wx.LIST_FORMAT_CENTER, width=200)
        self.list_pagos.InsertColumn(1, "Monto")

    def __set_properties(self):
        # begin wxGlade: PagosFrame.__set_properties
        self.SetTitle("Pagos de ")
        self.SetSize((500, 300))
        self.SetFocus()
        self.panel_10.SetMinSize((500, 295))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PagosFrame.__do_layout
        sizer_37 = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.list_pagos, 1, wx.EXPAND, 0)
        self.panel_10.SetSizer(sizer_1)
        sizer_37.Add(self.panel_10, 1, 0, 0)
        self.SetSizer(sizer_37)
        self.Layout()
        self.Centre()
        # end wxGlade

    def SetCliente(self, cliente):
        count = 0
        for pago in Pagos:
                if pago.cliente == cliente:
                        self.list_pagos.InsertStringItem(count, "%d/%d/%d" % (pago.fecha.day, pago.fecha.month, pago.fecha.year))
                        self.list_pagos.SetStringItem(count, 1, "$%s" % pago.monto)
                        count += 1

        self.SetTitle("Pagos de %s" % cliente.nombre)

# end of class PagosFrame


class CargarPagoFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CargarPagoFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_11 = wx.Panel(self, -1)
        self.label_info_cliente = wx.StaticText(self.panel_11, -1, "Cliente: #453 (Leonardo Ferreyra)")
        self.text_cuota = wx.TextCtrl(self.panel_11, -1, "9.7", style=wx.TE_CENTRE)
        self.static_line_7 = wx.StaticLine(self.panel_11, -1)
        self.button_6 = wx.Button(self.panel_11, -1, "Cargar")
        self.button_8 = wx.Button(self.panel_11, -1, "Salir")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnCargar, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.OnSalir, self.button_8)
        # end wxGlade

        self.parent = args[0]

    def __set_properties(self):
        # begin wxGlade: CargarPagoFrame.__set_properties
        self.SetTitle("Cargar pago del cliente: ")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((425, 176))
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.SetFocus()
        self.label_info_cliente.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_cuota.SetMinSize((200, 40))
        self.text_cuota.SetFont(wx.Font(20, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_cuota.SetFocus()
        self.button_6.SetDefault()
        self.panel_11.SetMinSize((425, 171))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CargarPagoFrame.__do_layout
        sizer_32 = wx.BoxSizer(wx.VERTICAL)
        sizer_33 = wx.BoxSizer(wx.VERTICAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33.Add(self.label_info_cliente, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_33.Add(self.text_cuota, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_33.Add(self.static_line_7, 0, wx.TOP|wx.EXPAND, 15)
        sizer_34.Add(self.button_6, 0, 0, 0)
        sizer_34.Add(self.button_8, 0, wx.LEFT, 10)
        sizer_33.Add(sizer_34, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 15)
        self.panel_11.SetSizer(sizer_33)
        sizer_32.Add(self.panel_11, 1, 0, 0)
        self.SetSizer(sizer_32)
        self.Layout()
        self.Centre()
        # end wxGlade

    def SetClienteInfo(self, cliente):
        self.label_info_cliente.SetLabel("Cliente: #%d (%s)" % (cliente.id, cliente.nombre))
        self.text_cuota.SetValue("%g" % cliente.cuota)


    def SetCobrador(self, cobrador):
        self.cobrador = cobrador
        self.cc = 0 # indice al cliente actual
        while (self.cc < len(self.cobrador.clientes)) and (self.cobrador.clientes[self.cc].saldo == 0):
                self.cc += 1
        self.SetClienteInfo(self.cobrador.clientes[self.cc])

    def OnCargar(self, event): # wxGlade: CargarPagoFrame.<event_handler>
        self.parent.pagos.append([self.cobrador.clientes[self.cc], float(self.text_cuota.GetValue())])
        self.parent.updateTotal()

        self.cc += 1

        while (self.cc < len(self.cobrador.clientes)) and (self.cobrador.clientes[self.cc].saldo == 0):
                self.cc += 1

        if self.cc == len(self.cobrador.clientes):
                self.Close()
        else:
                self.SetClienteInfo(self.cobrador.clientes[self.cc])
                self.Layout()

    def OnSalir(self, event): # wxGlade: CargarPagoFrame.<event_handler>
        self.Close()

# end of class CargarPagoFrame


class AboutFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AboutFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_9 = wx.Panel(self, -1)
        self.bitmap_7 = wx.StaticBitmap(self.panel_9, -1, wx.Bitmap("img/about.png", wx.BITMAP_TYPE_ANY))
        self.button_4 = wx.Button(self.panel_9, -1, "Licencia")
        self.button_sitio_web = wx.Button(self.panel_9, -1, "w3bex.com")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnLicencia, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.OnSitioWeb, self.button_sitio_web)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AboutFrame.__set_properties
        self.SetTitle("Acerca de")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.SetFocus()
        self.panel_9.SetMinSize((493, 356))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AboutFrame.__do_layout
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_27 = wx.BoxSizer(wx.VERTICAL)
        sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27.Add(self.bitmap_7, 0, 0, 0)
        sizer_31.Add(self.button_4, 1, wx.LEFT|wx.TOP|wx.BOTTOM|wx.EXPAND, 10)
        sizer_31.Add(self.button_sitio_web, 1, wx.ALL|wx.EXPAND, 10)
        sizer_27.Add(sizer_31, 1, wx.EXPAND, 0)
        self.panel_9.SetSizer(sizer_27)
        sizer_30.Add(self.panel_9, 1, 0, 0)
        self.SetSizer(sizer_30)
        sizer_30.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnSitioWeb(self, event): # wxGlade: AboutFrame.<event_handler>
        webbrowser.open("http://w3bex.com")

    def OnLicencia(self, event): # wxGlade: AboutFrame.<event_handler>
        webbrowser.open("http://w3bex.com/productos/sgpd/licencia")

# end of class AboutFrame


class CobradoresTransferirFrame(wx.Frame):
    def __init__(self, cobrador, *args, **kwds):

        global Cobradores

        self.opciones = []
        choices = ["Repartir entre los cobradores restantes", "Transferir al cobrador que menos clientes tiene"]
        optcounter = len(choices) # guardamos la cantidad de opciones no variables
        self.cobrador = cobrador

        for i in Cobradores:
                if i != cobrador:
                        choices.append("Transferir los clientes a %s" % i.nombre)
                        self.opciones.append(i)

        # Cambiar la lista choices de los parametros del radio_box por choices (la variable)

        # begin wxGlade: CobradoresTransferirFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_8 = wx.Panel(self, -1)
        self.label_2 = wx.StaticText(self.panel_8, -1, "El cobrador que desea eliminar tiene clientes asignados. \nAntes de eliminarlo debe transferir sus clientes a otro/s cobrador/es.", style=wx.ST_NO_AUTORESIZE)
        self.radio_box_1 = wx.RadioBox(self.panel_8, -1, "A quien desea transferir los clientes.", choices=choices, majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.button_2 = wx.Button(self.panel_8, -1, "Aceptar")
        self.button_3 = wx.Button(self.panel_8, -1, "Cancelar")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnAceptar, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.OnCancelar, self.button_3)
        # end wxGlade

        self.parent = args[0] # Guardamos una referencia al frame padre.

    def __set_properties(self):
        # begin wxGlade: CobradoresTransferirFrame.__set_properties
        self.SetTitle("Transferir clientes")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.radio_box_1.SetSelection(0)
        self.button_2.SetFocus()
        self.button_2.SetDefault()
        self.panel_8.SetMinSize((477, -1))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CobradoresTransferirFrame.__do_layout
        sizer_29 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25.Add(self.label_2, 0, wx.LEFT|wx.RIGHT|wx.TOP, 20)
        sizer_25.Add(self.radio_box_1, 1, wx.ALL|wx.EXPAND, 10)
        sizer_26.Add(self.button_2, 0, 0, 0)
        sizer_26.Add(self.button_3, 0, wx.LEFT, 10)
        sizer_25.Add(sizer_26, 0, wx.ALL|wx.ALIGN_RIGHT, 10)
        self.panel_8.SetSizer(sizer_25)
        sizer_29.Add(self.panel_8, 1, 0, 0)
        self.SetSizer(sizer_29)
        sizer_29.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnAceptar(self, event): # wxGlade: CobradoresTransferirFrame.<event_handler>
        
        global Cobradores, data
        opcion = self.radio_box_1.GetSelection()
        
        Cobradores.remove(self.cobrador)
        
        if opcion == 0:
                # Repartir los clientes entre los demas
                #print "Repartiendo entre clientes..."

                while len(self.cobrador.clientes) > 0:
                        for x in Cobradores:
                                if len(self.cobrador.clientes) > 0:
                                        cliente = self.cobrador.clientes.pop()
                                        cliente.cobrador = x
                                        x.clientes.append(cliente)
        elif opcion == 1:
                # Pasar al que tiene menos
                m = min(Cobradores, key = lambda x: len(x.clientes))
                #print "el cobrador que menos clientes tiene es %s" % m.nombre
                for c in self.cobrador.clientes:
                        c.cobrador = m
                        m.clientes.append(c)

        else:
                #print "Transfiriendo al cobrador: %s" % self.opciones[opcion - 2].nombre
                for c in self.cobrador.clientes:
                        c.cobrador = self.opciones[opcion - 2]
                        self.opciones[opcion - 2].clientes.append(c)

        
        self.parent.transfer_frames.remove(self)
        self.parent.update()
        self.Close()


    def OnCancelar(self, event): # wxGlade: CobradoresTransferirFrame.<event_handler>
        self.parent.transfer_frames.remove(self)
        self.Close()

# end of class CobradoresTransferirFrame



class NuevoClienteFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: NuevoClienteFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_3 = wx.Panel(self, -1)
        self.bitmap_2 = wx.StaticBitmap(self.panel_3, -1, wx.Bitmap("img/titulo_nuevo_cliente.png", wx.BITMAP_TYPE_ANY))
        self.static_line_1_copy = wx.StaticLine(self.panel_3, -1)
        self.label_nombre = wx.StaticText(self.panel_3, -1, "Nombre:")
        self.text_nombre = wx.TextCtrl(self.panel_3, -1, "")
        self.label_numero = wx.StaticText(self.panel_3, -1, u"Número: ")
        self.text_numero = wx.TextCtrl(self.panel_3, -1, "")
        self.label_telefono = wx.StaticText(self.panel_3, -1, u"Teléfono: ")
        self.text_telefono = wx.TextCtrl(self.panel_3, -1, "")
        self.label_direccion = wx.StaticText(self.panel_3, -1, u"Dirección:")
        self.text_direccion = wx.TextCtrl(self.panel_3, -1, "")
        self.label_saldo = wx.StaticText(self.panel_3, -1, "Saldo:")
        self.label_value_saldo = wx.StaticText(self.panel_3, -1, "$ 0")
        self.label_cobrador_copy_1 = wx.StaticText(self.panel_3, -1, "Cobrador")
        self.combo_cobrador = wx.ComboBox(self.panel_3, -1, choices=["Roberto", "Jose", "Javier", "Maria", "Pedro", "Marcos"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_comentarios = wx.StaticText(self.panel_3, -1, "Comentarios")
        self.text_comentarios = wx.TextCtrl(self.panel_3, -1, "", style=wx.TE_MULTILINE)
        self.list_productos = AutoWidthList(self.panel_3)
        self.button_agregar_producto = wx.Button(self.panel_3, -1, "Agregar Producto")
        self.button_quitar_producto = wx.Button(self.panel_3, -1, "Quitar Producto")
        self.static_line_3_copy = wx.StaticLine(self.panel_3, -1)
        self.button_crear = wx.Button(self.panel_3, -1, "Crear")
        self.button_cerrar = wx.Button(self.panel_3, -1, "Cerrar")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnAgregarProducto, self.button_agregar_producto)
        self.Bind(wx.EVT_BUTTON, self.OnQuitarProducto, self.button_quitar_producto)
        self.Bind(wx.EVT_BUTTON, self.OnCrearCliente, self.button_crear)
        self.Bind(wx.EVT_BUTTON, self.OnCerrar, self.button_cerrar)
        # end wxGlade

        self.parent = args[0] # Referencia al frame padre 
        
        self.list_productos.InsertColumn(0, "Producto", width = 270)
        self.list_productos.InsertColumn(1, "Precio")
        self.list_productos.InsertColumn(2, "Cuotas")

        self.combo_cobrador.Clear()
        global Cobradores
        if len(Cobradores) != 0:
                for x in Cobradores:
                        self.combo_cobrador.Append(x.nombre)
                self.combo_cobrador.SetSelection(0)
        else:
                error_dialog = wx.MessageDialog(self, "Debes crear por lo menos un cobrador para crear un cliente.", "Advertencia", wx.ICON_INFORMATION)
                error_dialog.ShowModal()
                error_dialog.Destroy()
                self.Close()

    def __set_properties(self):
        # begin wxGlade: NuevoClienteFrame.__set_properties
        self.SetTitle("Nuevo Cliente")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((522, 632))
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.SetFocus()
        self.label_nombre.SetMinSize((100, 17))
        self.text_nombre.SetMinSize((370, -1))
        self.text_nombre.SetFocus()
        self.label_numero.SetMinSize((100, 17))
        self.text_numero.SetMinSize((100, -1))
        self.label_telefono.SetMinSize((100, 17))
        self.text_telefono.SetMinSize((140, -1))
        self.label_direccion.SetMinSize((100, 17))
        self.text_direccion.SetMinSize((370, -1))
        self.label_saldo.SetMinSize((100, 17))
        self.label_value_saldo.SetMinSize((370, 18))
        self.label_value_saldo.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_cobrador_copy_1.SetMinSize((100, 17))
        self.combo_cobrador.SetMinSize((185, -1))
        self.combo_cobrador.SetSelection(3)
        self.label_comentarios.SetMinSize((100, 17))
        self.text_comentarios.SetMinSize((350, 75))
        self.button_crear.SetFocus()
        self.button_crear.SetDefault()
        self.panel_3.SetMinSize((520, 627))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: NuevoClienteFrame.__do_layout
        sizer_21 = wx.BoxSizer(wx.VERTICAL)
        sizer_4_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_13_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_8_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_9_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_2_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_2_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4_copy.Add(self.bitmap_2, 0, 0, 0)
        sizer_3_copy_1.Add(self.static_line_1_copy, 0, wx.EXPAND, 0)
        sizer_3_copy_copy_3.Add(self.label_nombre, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_3.Add(self.text_nombre, 0, wx.ALIGN_RIGHT, 0)
        sizer_2_copy.Add(sizer_3_copy_copy_3, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy_copy_1.Add(self.label_numero, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_copy_1.Add(self.text_numero, 0, wx.ALIGN_RIGHT, 0)
        sizer_3_copy_copy_copy_1.Add(self.label_telefono, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_copy_1.Add(self.text_telefono, 0, 0, 0)
        sizer_2_copy.Add(sizer_3_copy_copy_copy_1, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy_1_copy.Add(self.label_direccion, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_1_copy.Add(self.text_direccion, 0, wx.ALIGN_RIGHT, 0)
        sizer_2_copy.Add(sizer_3_copy_copy_1_copy, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy_copy_copy.Add(self.label_saldo, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_copy_copy.Add(self.label_value_saldo, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2_copy.Add(sizer_3_copy_copy_copy_copy, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy_2_copy.Add(self.label_cobrador_copy_1, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_2_copy.Add(self.combo_cobrador, 0, 0, 0)
        sizer_2_copy.Add(sizer_3_copy_copy_2_copy, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy_2_copy_1_copy.Add(self.label_comentarios, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_2_copy_1_copy.Add(self.text_comentarios, 0, 0, 0)
        sizer_2_copy.Add(sizer_3_copy_copy_2_copy_1_copy, 0, wx.ALL|wx.EXPAND, 10)
        sizer_8_copy.Add(self.list_productos, 1, wx.EXPAND, 0)
        sizer_9_copy.Add(self.button_agregar_producto, 1, wx.EXPAND, 0)
        sizer_9_copy.Add(self.button_quitar_producto, 1, wx.EXPAND, 0)
        sizer_8_copy.Add(sizer_9_copy, 0, wx.EXPAND, 0)
        sizer_2_copy.Add(sizer_8_copy, 1, wx.ALL|wx.EXPAND, 20)
        sizer_3_copy_1.Add(sizer_2_copy, 1, wx.TOP|wx.EXPAND, 10)
        sizer_3_copy_1.Add(self.static_line_3_copy, 0, wx.EXPAND, 0)
        sizer_4_copy.Add(sizer_3_copy_1, 1, wx.EXPAND, 0)
        sizer_13_copy.Add(self.button_crear, 0, wx.LEFT|wx.TOP|wx.BOTTOM, 10)
        sizer_13_copy.Add(self.button_cerrar, 0, wx.ALL, 10)
        sizer_4_copy.Add(sizer_13_copy, 0, wx.ALIGN_RIGHT, 0)
        self.panel_3.SetSizer(sizer_4_copy)
        sizer_21.Add(self.panel_3, 1, 0, 0)
        self.SetSizer(sizer_21)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnCrearCliente(self, event): # wxGlade: NuevoClienteFrame.<event_handler>
        if self.text_nombre.GetValue() != "" and self.text_direccion.GetValue() != "":
                global Clientes, data

                nombre = self.text_nombre.GetValue()

                # Si no se le da un numero de cliente, buscamos uno que no este
                # siendo utilizado
                if self.text_numero.GetValue() != "":
                        numero = self.text_numero.GetValue()
                else:
                        idlist = []
                        for x in Clientes:
                                idlist.append(x.id)

                        for j in range(len(Clientes)+1):
                                if j not in idlist:
                                        numero = j

                direccion = self.text_direccion.GetValue()
                nombre_cobrador = self.combo_cobrador.Value
                telefono = self.text_telefono.GetValue()
                comentarios = self.text_comentarios.GetValue()

                for i in Cobradores:
                        if i.nombre == nombre_cobrador:
                                cobrador = i

                c = Cliente(int(numero))
                c.nombre = nombre
                c.cobrador = cobrador
                c.direccion = direccion
                c.telefono = telefono
                c.comentarios = comentarios

                for i in range(self.list_productos.GetItemCount()):
                        producto = self.list_productos.GetItem(i, 0).GetText()
                        precio = float(self.list_productos.GetItem(i, 1).GetText()[1:])
                        cuotas = int(self.list_productos.GetItem(i, 2).GetText().split()[0])

                        p = Producto(producto, precio, cuotas)
                        c.productos.append(p)

                cobrador.clientes.append(c)
                Clientes.append(c)

                # Ordenamos la lista de clientes segun el id

                Clientes.sort(key = lambda x: x.id)

                data.save()
                self.parent.update()
                self.Close()
        else:
                msj = "Como minimo debe especificar el nombre del cliente y su dirección."
                error_dialog = wx.MessageDialog(self, msj, "Error", style = wx.ICON_ERROR)
                error_dialog.ShowModal()
        

    def OnAgregarProducto(self, event): # wxGlade: NuevoClienteFrame.<event_handler>

        agregar_producto_frame = ProductosFrame(self, -1, "")
        agregar_producto_frame.Show()

    def OnQuitarProducto(self, event): # wxGlade: NuevoClienteFrame.<event_handler>

        dlg = wx.MessageDialog(self, 
            "Seguro que deseas eliminar este producto?",
            "Confirmar Quitar Producto", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
        result = dlg.ShowModal()
        dlg.Destroy()

        if result == wx.ID_OK:
                self.list_productos.DeleteItem(self.list_productos.GetFocusedItem())

    def AgregarItemProducto(self, producto, precio, cuotas, event):

        itemid = self.list_productos.GetItemCount()
        self.list_productos.InsertStringItem(itemid,  "%s" % producto)
        self.list_productos.SetStringItem(itemid, 1, "$%g" % precio)
        self.list_productos.SetStringItem(itemid, 2, "%g ($%g)" % (cuotas, round(precio / cuotas, 2)))

        self.updateSaldo()

    def updateSaldo(self):
        saldo = 0
        for i in range(self.list_productos.GetItemCount()):
                saldo += int(self.list_productos.GetItem(i, 1).GetText()[1:])
        self.label_value_saldo.SetLabel("$%s" % saldo)
                
    def OnCerrar(self, event): # wxGlade: NuevoClienteFrame.<event_handler>
        self.Close()

# end of class NuevoClienteFrame


class ProductosFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ProductosFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_4 = wx.Panel(self, -1)
        self.bitmap_3 = wx.StaticBitmap(self.panel_4, -1, wx.Bitmap("img/titulo_agregar_producto.png", wx.BITMAP_TYPE_ANY))
        self.static_line_5 = wx.StaticLine(self.panel_4, -1)
        self.label_producto = wx.StaticText(self.panel_4, -1, "Producto:")
        self.text_nombre = wx.TextCtrl(self.panel_4, -1, "")
        self.label_precio = wx.StaticText(self.panel_4, -1, "Precio:")
        self.label_9 = wx.StaticText(self.panel_4, -1, "$")
        self.text_precio = wx.TextCtrl(self.panel_4, -1, "")
        self.label_8 = wx.StaticText(self.panel_4, -1, "Cuotas:")
        self.spin_cuotas = wx.SpinCtrl(self.panel_4, -1, "6", min=0, max=10000000)
        self.static_line_4 = wx.StaticLine(self.panel_4, -1)
        self.button_cancelar = wx.Button(self.panel_4, -1, "Cancelar")
        self.button_agregar = wx.Button(self.panel_4, -1, "Agregar")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnCancelar, self.button_cancelar)
        self.Bind(wx.EVT_BUTTON, self.OnAgregar, self.button_agregar)
        # end wxGlade

        self.parent = args[0] # Referencia al frame padre (Cliente, NuevoCliente)
        self.editado = False # Indica si se han hecho modificaciones al cliente.

    def __set_properties(self):
        # begin wxGlade: ProductosFrame.__set_properties
        self.SetTitle("Agregar Producto")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((520, 252))
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.SetFocus()
        self.bitmap_3.SetMinSize((520, 70))
        self.label_producto.SetMinSize((100, 17))
        self.text_nombre.SetMinSize((370, -1))
        self.text_nombre.SetFocus()
        self.label_precio.SetMinSize((100, 17))
        self.text_precio.SetMinSize((110, -1))
        self.label_8.SetMinSize((100, 17))
        self.spin_cuotas.SetMinSize((95, -1))
        self.button_agregar.SetFocus()
        self.button_agregar.SetDefault()
        self.panel_4.SetMinSize((520, 247))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ProductosFrame.__do_layout
        sizer_22 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_3_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10.Add(self.bitmap_3, 0, 0, 0)
        sizer_10.Add(self.static_line_5, 0, wx.EXPAND, 0)
        sizer_3_copy_copy_3_copy.Add(self.label_producto, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_3_copy.Add(self.text_nombre, 0, wx.ALIGN_RIGHT, 0)
        sizer_12.Add(sizer_3_copy_copy_3_copy, 0, wx.ALL|wx.EXPAND, 10)
        sizer_14.Add(self.label_precio, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_14.Add(self.label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_14.Add(self.text_precio, 0, wx.LEFT, 0)
        sizer_14.Add(self.label_8, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 40)
        sizer_14.Add(self.spin_cuotas, 0, 0, 0)
        sizer_12.Add(sizer_14, 0, wx.ALL|wx.EXPAND, 10)
        sizer_10.Add(sizer_12, 1, wx.TOP|wx.EXPAND, 10)
        sizer_10.Add(self.static_line_4, 0, wx.EXPAND, 0)
        sizer_11.Add(self.button_cancelar, 0, wx.ALL, 10)
        sizer_11.Add(self.button_agregar, 0, wx.RIGHT|wx.TOP|wx.BOTTOM, 10)
        sizer_10.Add(sizer_11, 0, wx.ALIGN_RIGHT, 0)
        self.panel_4.SetSizer(sizer_10)
        sizer_22.Add(self.panel_4, 1, 0, 0)
        self.SetSizer(sizer_22)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnCancelar(self, event): # wxGlade: ProductosFrame.<event_handler>
        self.Close()

    def OnAgregar(self, event): # wxGlade: ProductosFrame.<event_handler>
        if self.text_nombre.GetValue() != "" and self.text_precio.GetValue() != "":

                producto = self.text_nombre.GetValue()                        
                try:        
                        cuotas = int(self.spin_cuotas.GetValue())
                except:
                        msj = "El campo cuotas debe tener un numero entero mayor a 0"
                        error_dialog = wx.MessageDialog(self, msj, "Error", style = wx.ICON_ERROR)
                        error_dialog.ShowModal()
                        error_dialog.Destroy()
                try:
                        precio = float(self.text_precio.GetValue())
                except:
                        msj = "El campo precio debe ser un numero mayor a 0"
                        error_dialog = wx.MessageDialog(self, msj, "Error", style = wx.ICON_ERROR)
                        error_dialog.ShowModal()
                        error_dialog.Destroy()

                if cuotas > 0 and precio > 0:
                        self.parent.AgregarItemProducto(producto, precio, cuotas, event)
                        self.Close()
                else: 
                        msj = ""
                        if precio <= 0: 
                                msj += "El campo precio debe ser mayor a 0 "
                        if cuotas <= 0:
                                msj += "El campo cuotas debe tener un numero entero mayor a 0"

                        error_dialog = wx.MessageDialog(self, msj, "Error", style = wx.ICON_ERROR)
                        error_dialog.ShowModal()
                        error_dialog.Destroy()
        else:

                msj = "Debe completar todos los campos para continuar."
                error_dialog = wx.MessageDialog(self, msj, "Error", style = wx.ICON_ERROR)
                error_dialog.ShowModal()
                error_dialog.Destroy()

        
# end of class ProductosFrame


class CobradoresFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CobradoresFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_5 = wx.Panel(self, -1)
        self.bitmap_4 = wx.StaticBitmap(self.panel_5, -1, wx.Bitmap("img/titulo_administrar_cobradores.png", wx.BITMAP_TYPE_ANY))
        self.static_line_5_copy = wx.StaticLine(self.panel_5, -1)
        self.list_cobradores = AutoWidthList(self.panel_5)
        self.label_10 = wx.StaticText(self.panel_5, -1, "Nombre: ")
        self.text_nombre = wx.TextCtrl(self.panel_5, -1, "")
        self.button_agregar = wx.Button(self.panel_5, -1, "Agregar")
        self.button_quitar = wx.Button(self.panel_5, -1, "Quitar")
        self.static_line_4_copy = wx.StaticLine(self.panel_5, -1)
        self.button_cerrar = wx.Button(self.panel_5, -1, "Cerrar")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnAgregar, self.button_agregar)
        self.Bind(wx.EVT_BUTTON, self.OnQuitar, self.button_quitar)
        self.Bind(wx.EVT_BUTTON, self.OnCerrar, self.button_cerrar)
        # end wxGlade

        # Insertar columnas a la lista
        self.list_cobradores.InsertColumn(0, "Cobrador", width=300)
        self.list_cobradores.InsertColumn(1, "Clientes")

        self.setData()
        self.transfer_frames = []




    def __set_properties(self):
        # begin wxGlade: CobradoresFrame.__set_properties
        self.SetTitle("Cobradores")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((520, 441))
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.SetFocus()
        self.text_nombre.SetMinSize((200, -1))
        self.text_nombre.SetFocus()
        self.button_agregar.SetFocus()
        self.button_agregar.SetDefault()
        self.panel_5.SetMinSize((520, 436))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CobradoresFrame.__do_layout
        sizer_23 = wx.BoxSizer(wx.VERTICAL)
        sizer_10_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_11_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10_copy.Add(self.bitmap_4, 0, 0, 0)
        sizer_10_copy.Add(self.static_line_5_copy, 0, wx.EXPAND, 0)
        sizer_15.Add(self.list_cobradores, 1, wx.EXPAND, 0)
        sizer_16.Add(self.label_10, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_16.Add(self.text_nombre, 1, wx.ALIGN_CENTER_VERTICAL, 70)
        sizer_16.Add(self.button_agregar, 0, wx.LEFT, 5)
        sizer_16.Add(self.button_quitar, 0, wx.LEFT, 5)
        sizer_15.Add(sizer_16, 0, wx.TOP|wx.EXPAND, 10)
        sizer_10_copy.Add(sizer_15, 1, wx.ALL|wx.EXPAND, 20)
        sizer_10_copy.Add(self.static_line_4_copy, 0, wx.EXPAND, 0)
        sizer_11_copy.Add(self.button_cerrar, 0, wx.ALL, 10)
        sizer_10_copy.Add(sizer_11_copy, 0, wx.ALIGN_RIGHT, 0)
        self.panel_5.SetSizer(sizer_10_copy)
        sizer_23.Add(self.panel_5, 1, 0, 0)
        self.SetSizer(sizer_23)
        self.Layout()
        self.Centre()
        # end wxGlade

    def setData(self):
        global Cobradores

        for c in Cobradores:
                self.list_cobradores.InsertStringItem(Cobradores.index(c), c.nombre)
                self.list_cobradores.SetStringItem(Cobradores.index(c), 1, "%d" % len(c.clientes))

    def update(self):
        self.list_cobradores.DeleteAllItems()
        self.text_nombre.SetValue("")
        self.setData()

    def OnAgregar(self, event): # wxGlade: CobradoresFrame.<event_handler>
        global Cobradores, data

        nombres = []
        for i in Cobradores:
                nombres.append(i.nombre)

        nombre = self.text_nombre.GetValue()

        if nombre != "":
                if nombre not in nombres:
                        c = Cobrador(nombre)
                        Cobradores.append(c)
                        data.save()
                        self.update()
                else:
                        error_dialog = wx.MessageDialog(self, "Ya existe un cobrador con ese nombre. Indique un nombre diferente", "Error", style=wx.ICON_ERROR)
                        error_dialog.ShowModal()
                        error_dialog.Destroy()
        else:
                error_dialog = wx.MessageDialog(self, "Debe completar el campo nombre.", "Error", style=wx.ICON_ERROR)
                error_dialog.ShowModal()
                error_dialog.Destroy()


    def OnQuitar(self, event): # wxGlade: CobradoresFrame.<event_handler>
        
        global Cobradores, data
        cobrador = Cobradores[self.list_cobradores.GetFocusedItem()]
        if len(cobrador.clientes) != 0:
                if len(Cobradores) > 1:
                        if len(self.transfer_frames) == 0:
                                transferir_frame = CobradoresTransferirFrame(cobrador, self, -1, "")
                                self.transfer_frames.append(transferir_frame)
                                transferir_frame.Show()
                else:
                        msg = "No puede eliminar el ultimo cobrador si tiene clientes asignados, para eliminarlo debe crear mas cobradores a los que transferir los clientes"
                        error_dialog = wx.MessageDialog(self, msg, "Error", style=wx.ICON_ERROR)
                        error_dialog.ShowModal()
                        error_dialog.Destroy()
        else:
                Cobradores.remove(cobrador)
                data.save()
                self.update()

    def OnCerrar(self, event): # wxGlade: CobradoresFrame.<event_handler>
        self.Close()

    def update(self):
        self.text_nombre.SetValue("")
        self.list_cobradores.DeleteAllItems()
        self.setData()


# end of class CobradoresFrame


class ImprimirPlanillasFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ImprimirPlanillasFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_6 = wx.Panel(self, -1)
        self.bitmap_5 = wx.StaticBitmap(self.panel_6, -1, wx.Bitmap("img/imprimir_planillas_titulo.png", wx.BITMAP_TYPE_ANY))
        self.static_line_5_copy_copy = wx.StaticLine(self.panel_6, -1)
        self.checkbox_1 = wx.CheckBox(self.panel_6, -1, "Imprimir Todas Las Planillas")
        self.static_line_8 = wx.StaticLine(self.panel_6, -1)
        self.static_line_4_copy_copy = wx.StaticLine(self.panel_6, -1)
        self.button_cancelar = wx.Button(self.panel_6, -1, "Cancelar")
        self.button_imprimir = wx.Button(self.panel_6, -1, "Imprimir")

        self.cobradores_checks = []

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.OnCheckTodos, self.checkbox_1)
        self.Bind(wx.EVT_BUTTON, self.OnCancelar, self.button_cancelar)
        self.Bind(wx.EVT_BUTTON, self.OnImprimir, self.button_imprimir)
        # end wxGlade

        for x in self.cobradores_checks:
                self.Bind(wx.EVT_CHECKBOX, self.OnCheckUno, x)

        self.check_all()
        

    def check_all(self, v=True):
        for i in self.cobradores_checks:
                i.SetValue(v)

    def __set_properties(self):
        # begin wxGlade: ImprimirPlanillasFrame.__set_properties
        self.SetTitle("Imprimir Planillas")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.SetFocus()
        self.checkbox_1.SetValue(1)
        self.button_imprimir.SetFocus()
        self.button_imprimir.SetDefault()
        self.panel_6.SetMinSize((520, -1))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ImprimirPlanillasFrame.__do_layout
        sizer_35 = wx.BoxSizer(wx.VERTICAL)
        sizer_10_copy_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_11_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_check_boxes = wx.BoxSizer(wx.VERTICAL)
        sizer_10_copy_copy.Add(self.bitmap_5, 0, 0, 0)
        sizer_10_copy_copy.Add(self.static_line_5_copy_copy, 0, wx.EXPAND, 0)
        sizer_check_boxes.Add(self.checkbox_1, 0, wx.BOTTOM, 5)
        sizer_check_boxes.Add(self.static_line_8, 0, wx.EXPAND, 0)
        sizer_10_copy_copy.Add(sizer_check_boxes, 0, wx.ALL|wx.EXPAND, 20)
        sizer_10_copy_copy.Add(self.static_line_4_copy_copy, 0, wx.EXPAND, 0)
        sizer_11_copy_copy.Add(self.button_cancelar, 0, wx.LEFT|wx.TOP|wx.BOTTOM, 10)
        sizer_11_copy_copy.Add(self.button_imprimir, 0, wx.ALL, 10)
        sizer_10_copy_copy.Add(sizer_11_copy_copy, 0, wx.ALIGN_RIGHT, 0)
        self.panel_6.SetSizer(sizer_10_copy_copy)
        sizer_35.Add(self.panel_6, 1, 0, 0)

        # Set checkboxes para cada cobrador
        global Cobradores
        for i in Cobradores:
                checkbox = wx.CheckBox(self.panel_6, -1, "Planillas para %s" % i.nombre)
                sizer_check_boxes.Add(checkbox, 0, wx.EXPAND)
                self.cobradores_checks.append(checkbox)

        self.SetSizer(sizer_35)
        sizer_35.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade


        # Esto va antes de self.SetSizer en __do_layout()
        #
        # Set checkboxes para cada cobrador
        #global Cobradores
        #for i in Cobradores:
        #        checkbox = wx.CheckBox(self, -1, "Planillas para %s" % i.nombre)
        #        sizer_check_boxes.Add(checkbox, 0, wx.TOP|wx.EXPAND, 5)
        #        self.cobradores_checks.append(checkbox)

        # Esto va antes de self.__se_properties():
        # self.cobradores_checks = []

    def OnCheckTodos(self, event): # wxGlade: ImprimirPlanillasFrame.<event_handler>
        if self.checkbox_1.IsChecked():
                self.check_all(True)
        else:
                self.check_all(False)

    def OnCheckUno(self, event): # Se llama cuando cualquiera de los otros checkbox es clickeado
        allchecked = True
        for i in self.cobradores_checks:
                if not i.IsChecked():
                        allchecked = False
        if not allchecked:
                self.checkbox_1.SetValue(False)
        else:
                self.checkbox_1.SetValue(True)



    def OnCancelar(self, event): # wxGlade: ImprimirPlanillasFrame.<event_handler>
        self.Close()

    def OnImprimir(self, event): # wxGlade: ImprimirPlanillasFrame.<event_handler>
        for i in self.cobradores_checks:
                if i.IsChecked():
                        if len(Cobradores[self.cobradores_checks.index(i)].clientes) > 0:
                                planilla = printer.PlanillaCobrador(Cobradores[self.cobradores_checks.index(i)])
                                planilla.Imprimir()
                                if len(Cobradores[self.cobradores_checks.index(i)].GetClientesMorosos()) > 0:
                                        planilla_morosos = printer.PlanillaCobradorMorosos(Cobradores[self.cobradores_checks.index(i)])
                                        planilla_morosos.Imprimir()

        self.Close()

# end of class ImprimirPlanillasFrame


class CargarPlanillasFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CargarPlanillasFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_7 = wx.Panel(self, -1)
        self.bitmap_6 = wx.StaticBitmap(self.panel_7, -1, wx.Bitmap("img/cargar_planillas_titulo.png", wx.BITMAP_TYPE_ANY))
        self.static_line_6 = wx.StaticLine(self.panel_7, -1)
        self.label_cobrador = wx.StaticText(self.panel_7, -1, "Cobrador:")
        self.combo_cobrador = wx.ComboBox(self.panel_7, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.datepicker_ctrl_1 = wx.DatePickerCtrl(self.panel_7, -1)
        self.button_5 = wx.Button(self.panel_7, -1, "Cargar")
        self.label_3 = wx.StaticText(self.panel_7, -1, "TOTAL CARGADO: $0")
        self.button_cancelar_copy = wx.Button(self.panel_7, -1, "Cancelar")
        self.button_cargar = wx.Button(self.panel_7, -1, "Aceptar")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnCargar, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.OnCancelar, self.button_cancelar_copy)
        self.Bind(wx.EVT_BUTTON, self.OnAceptar, self.button_cargar)
        # end wxGlade

        global Cobradores
        for c in Cobradores:
                self.combo_cobrador.Append(c.nombre)

        self.pagos = [] # Lista de tuplas donde se almacenan los pagos en la forma [obj-cliente, cuota]

        self.parent = args[0]

    def __set_properties(self):
        # begin wxGlade: CargarPlanillasFrame.__set_properties
        self.SetTitle("Cargar Datos de Planillas")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((520, 260))
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.SetFocus()
        self.label_3.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_cargar.SetFocus()
        self.button_cargar.SetDefault()
        self.panel_7.SetMinSize((520, 255))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CargarPlanillasFrame.__do_layout
        sizer_36 = wx.BoxSizer(wx.VERTICAL)
        sizer_18 = wx.BoxSizer(wx.VERTICAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.VERTICAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18.Add(self.bitmap_6, 0, 0, 0)
        sizer_18.Add(self.static_line_6, 0, wx.EXPAND, 0)
        sizer_24.Add(self.label_cobrador, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_24.Add(self.combo_cobrador, 1, 0, 0)
        sizer_24.Add(self.datepicker_ctrl_1, 1, wx.LEFT|wx.EXPAND, 10)
        sizer_24.Add(self.button_5, 0, wx.LEFT, 5)
        sizer_20.Add(sizer_24, 0, wx.ALL|wx.EXPAND, 20)
        sizer_20.Add(self.label_3, 0, wx.ALIGN_CENTER_HORIZONTAL, 15)
        sizer_18.Add(sizer_20, 0, wx.EXPAND, 10)
        sizer_19.Add(self.button_cancelar_copy, 0, wx.ALL, 10)
        sizer_19.Add(self.button_cargar, 0, wx.RIGHT|wx.TOP|wx.BOTTOM, 10)
        sizer_18.Add(sizer_19, 0, wx.TOP|wx.ALIGN_CENTER_HORIZONTAL, 15)
        self.panel_7.SetSizer(sizer_18)
        sizer_36.Add(self.panel_7, 1, 0, 0)
        self.SetSizer(sizer_36)
        self.Layout()
        self.Centre()
        # end wxGlade

    def updateTotal(self):
        total = 0
        for i in self.pagos:
                total += i[1]

        self.label_3.SetLabel("TOTAL CARGADO: $%g" % total)

    def OnCargar(self, event): # wxGlade: CargarPlanillasFrame.<event_handler>

        self.combo_cobrador.Enable(False)
        self.datepicker_ctrl_1.Enable(False)
        try:
                cargar_pago_frame = CargarPagoFrame(self, -1, "")
                cargar_pago_frame.SetCobrador(Cobradores[self.combo_cobrador.GetSelection()])
                cargar_pago_frame.Show()
        except:
                error_dialog = wx.MessageDialog(self, "Este cobrador no posee clientes", "Error", wx.ICON_ERROR)
                error_dialog.ShowModal()
                self.combo_cobrador.Enable(True)
                self.datepicker_ctrl_1.Enable(True)

    def OnCancelar(self, event): # wxGlade: CargarPlanillasFrame.<event_handler>
        self.Close()

    def OnAceptar(self, event): # wxGlade: CargarPlanillasFrame.<event_handler>
        global Pagos, data
        for p in self.pagos:
                print p[0].nombre, " paga ", p[1]
                p[0].pagar(p[1])
                np = Pago(datetime.date.today(), p[0], p[1])
                Pagos.append(np)
        data.save()
        self.parent.update()
        self.Close()

# end of class CargarPlanillasFrame


class ClienteFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ClienteFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_2 = wx.Panel(self, -1)
        self.bitmap_1 = wx.StaticBitmap(self.panel_2, -1, wx.Bitmap("img/titulo_cliente.png", wx.BITMAP_TYPE_ANY))
        self.static_line_1 = wx.StaticLine(self.panel_2, -1)
        self.label_nombre_copy = wx.StaticText(self.panel_2, -1, "Nombre:")
        self.label_value_nombre = wx.StaticText(self.panel_2, -1, "Leonardo Ezequiel Ferreyra")
        self.label_telefono_copy = wx.StaticText(self.panel_2, -1, u"Teléfono: ")
        self.label_value_telefono = wx.StaticText(self.panel_2, -1, "4467367")
        self.label_direccion_copy = wx.StaticText(self.panel_2, -1, u"Dirección:")
        self.label_value_direccion = wx.StaticText(self.panel_2, -1, "Mz 86 Pc 4 B 263 Viv. Fontana")
        self.label_saldo_copy = wx.StaticText(self.panel_2, -1, "Saldo:")
        self.label_value_saldo = wx.StaticText(self.panel_2, -1, "$2345")
        self.button_pagos = wx.Button(self.panel_2, -1, "Pagos")
        self.label_cobrador_copy = wx.StaticText(self.panel_2, -1, "Cobrador")
        self.combo_cobrador = wx.ComboBox(self.panel_2, -1, choices=["Roberto", "Jose", "Javier", "Maria", "Pedro", "Marcos"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_comentarios_copy = wx.StaticText(self.panel_2, -1, "Comentarios")
        self.text_comentarios = wx.TextCtrl(self.panel_2, -1, "", style=wx.TE_MULTILINE)
        self.list_productos = AutoWidthList(self.panel_2)
        self.button_agregar_producto = wx.Button(self.panel_2, -1, "Agregar Producto")
        self.button_quitar_producto = wx.Button(self.panel_2, -1, "Quitar Producto")
        self.static_line_3 = wx.StaticLine(self.panel_2, -1)
        self.button_eliminar = wx.Button(self.panel_2, -1, "Eliminar")
        self.button_editar = wx.Button(self.panel_2, -1, "Guardar")
        self.button_cerrar = wx.Button(self.panel_2, -1, "Cerrar")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnPagos, self.button_pagos)
        self.Bind(wx.EVT_COMBOBOX, self.OnCambiarCobrador, self.combo_cobrador)
        self.Bind(wx.EVT_TEXT, self.OnComentarios, self.text_comentarios)
        self.Bind(wx.EVT_BUTTON, self.OnAgregarProducto, self.button_agregar_producto)
        self.Bind(wx.EVT_BUTTON, self.OnQuitarProducto, self.button_quitar_producto)
        self.Bind(wx.EVT_BUTTON, self.OnEliminarCliente, self.button_eliminar)
        self.Bind(wx.EVT_BUTTON, self.OnGuardar, self.button_editar)
        self.Bind(wx.EVT_BUTTON, self.OnCerrar, self.button_cerrar)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.OnCerrar)

        self.parent = args[0] # Una referencia al frame padre


    def __set_properties(self):
        # begin wxGlade: ClienteFrame.__set_properties
        self.SetTitle("Cliente: Leonardo Ferreyra")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((520, 609))
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.SetFocus()
        self.label_nombre_copy.SetMinSize((100, 17))
        self.label_value_nombre.SetMinSize((370, 18))
        self.label_value_nombre.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_telefono_copy.SetMinSize((100, 17))
        self.label_value_telefono.SetMinSize((370, 18))
        self.label_value_telefono.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_direccion_copy.SetMinSize((100, 17))
        self.label_value_direccion.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_saldo_copy.SetMinSize((100, 17))
        self.label_value_saldo.SetMinSize((100, 18))
        self.label_value_saldo.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_cobrador_copy.SetMinSize((100, 17))
        self.combo_cobrador.SetSelection(3)
        self.label_comentarios_copy.SetMinSize((100, 17))
        self.text_comentarios.SetMinSize((350, 75))
        self.button_editar.Enable(False)
        self.button_cerrar.SetFocus()
        self.button_cerrar.SetDefault()
        self.panel_2.SetMinSize((520, 610))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ClienteFrame.__do_layout
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_8_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_2_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.bitmap_1, 0, 0, 0)
        sizer_3.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizer_3_copy.Add(self.label_nombre_copy, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy.Add(self.label_value_nombre, 0, 0, 0)
        sizer_2.Add(sizer_3_copy, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy.Add(self.label_telefono_copy, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy.Add(self.label_value_telefono, 0, 0, 0)
        sizer_2.Add(sizer_3_copy_copy, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy_1.Add(self.label_direccion_copy, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_1.Add(self.label_value_direccion, 0, 0, 0)
        sizer_2.Add(sizer_3_copy_copy_1, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy_copy.Add(self.label_saldo_copy, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_copy.Add(self.label_value_saldo, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_copy.Add(self.button_pagos, 0, 0, 0)
        sizer_2.Add(sizer_3_copy_copy_copy, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy_2.Add(self.label_cobrador_copy, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_2.Add(self.combo_cobrador, 0, 0, 0)
        sizer_2.Add(sizer_3_copy_copy_2, 0, wx.ALL|wx.EXPAND, 10)
        sizer_3_copy_copy_2_copy_1.Add(self.label_comentarios_copy, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_3_copy_copy_2_copy_1.Add(self.text_comentarios, 0, 0, 0)
        sizer_2.Add(sizer_3_copy_copy_2_copy_1, 0, wx.ALL|wx.EXPAND, 10)
        sizer_8_copy_1.Add(self.list_productos, 1, wx.EXPAND, 0)
        sizer_9.Add(self.button_agregar_producto, 1, wx.EXPAND, 0)
        sizer_9.Add(self.button_quitar_producto, 1, wx.EXPAND, 0)
        sizer_8_copy_1.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_8_copy_1, 1, wx.ALL|wx.EXPAND, 20)
        sizer_3.Add(sizer_2, 1, wx.TOP|wx.EXPAND, 10)
        sizer_3.Add(self.static_line_3, 0, wx.EXPAND, 0)
        sizer_4.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_13.Add(self.button_eliminar, 0, wx.ALL, 10)
        sizer_13.Add(self.button_editar, 0, wx.TOP|wx.BOTTOM, 10)
        sizer_13.Add(self.button_cerrar, 0, wx.ALL, 10)
        sizer_4.Add(sizer_13, 0, wx.ALIGN_RIGHT, 0)
        self.panel_2.SetSizer(sizer_4)
        sizer_8.Add(self.panel_2, 1, 0, 0)
        self.SetSizer(sizer_8)
        self.Layout()
        self.Centre()
        # end wxGlade

        self.editado = False



    def setEditado(self, event):
        self.editado = True
        self.button_editar.Enable(True)

    def unsetEditado(self, event):
        self.editado = False
        self.button_editar.Enable(False)

    def setCliente(self, cliente):

        self.cliente = cliente
        self.SetTitle("Cliente: %s" % cliente.nombre)

        # Hacemos una copia de la lista de productos del cliente
        # para modificar la nueva, y luego guardarla...
        self.new_productos = []
        for i in self.cliente.productos:
                self.new_productos.append(i)

        self.label_value_nombre.SetLabel("%s (#%d)" % (cliente.nombre, cliente.id))
        self.label_value_telefono.SetLabel(cliente.telefono)
        self.label_value_saldo.SetLabel("$%g" % cliente.saldo)
        self.label_value_direccion.SetLabel(cliente.direccion)
        self.label_value_telefono.SetLabel(str(cliente.telefono))
        self.text_comentarios.SetValue(cliente.comentarios)

        self.combo_cobrador.Clear()
        global Cobradores
        for x in Cobradores:
                self.combo_cobrador.Append(x.nombre)
        self.combo_cobrador.SetSelection(Cobradores.index(cliente.cobrador))

        self.list_productos.InsertColumn(0, "Producto", width=130)
        self.list_productos.InsertColumn(1, "Precio")
        self.list_productos.InsertColumn(2, "Cuotas")
        self.list_productos.InsertColumn(3, "Saldo")
        if self.cliente.esMoroso():
                self.list_productos.InsertColumn(4, "Atrasado")

        self.setProductosList()

        self.unsetEditado(-1)

    def OnEliminarCliente(self, event): # wxGlade: ClienteFrame.<event_handler>
        
        dlg = wx.MessageDialog(self, 
            "Estas seguro que deseas eliminar este cliente? Esto no se puede deshacer",
            "Confirmar Eliminar Cliente", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
        result = dlg.ShowModal()
        dlg.Destroy()

        if result == wx.ID_OK:
                global Clientes, data

                for i in Clientes:
                        if i.id == self.cliente.id:
                                i.cobrador.clientes.remove(i)
                                Clientes.remove(i)

                data.save()
                self.parent.update()
                self.Close()

    def AgregarItemProducto(self, producto, precio, cuotas, event):
        self.setEditado(event)  
        itemid = self.list_productos.GetItemCount()
        self.list_productos.InsertStringItem(itemid,  "%s" % producto)
        self.list_productos.SetStringItem(itemid, 1, "$%g" % precio)
        self.list_productos.SetStringItem(itemid, 2, "%d" % cuotas)
        self.list_productos.SetStringItem(itemid, 3, "$%g" % precio)

        p = Producto(producto, precio, cuotas)
        self.new_productos.append(p)

        self.updateProductosList()
        self.updateSaldo()

    def updateSaldo(self):
        saldo = 0
        for i in range(self.list_productos.GetItemCount()):
                saldo += int(self.list_productos.GetItem(i, 1).GetText()[1:])
        self.label_value_saldo.SetLabel("$%s" % saldo)

    def setProductosList(self):
        for i in self.new_productos:
                self.list_productos.InsertStringItem(self.new_productos.index(i), i.nombre)
                self.list_productos.SetStringItem(self.new_productos.index(i), 1, "$%g" % i.precio)
                self.list_productos.SetStringItem(self.new_productos.index(i), 2, "%d/%d ($%g)" % (i.cuotas_pagas, i.cuotas, i.cuota))
                self.list_productos.SetStringItem(self.new_productos.index(i), 3, "$%g" % i.saldo)
                if self.cliente.esMoroso():
                        self.list_productos.SetStringItem(self.new_productos.index(i), 4, "$%g (%d)" % (i.saldo_atrasado, i.cuotas_atrasadas))

    def updateProductosList(self):
        self.list_productos.DeleteAllItems()
        self.setProductosList()

    def OnGuardar(self, event): # wxGlade: ClienteFrame.<event_handler>
        global data, Cobradores

        self.cliente.cobrador.clientes.remove(self.cliente) # Primero sacamos el cliente del antiguo cobrador
        self.cliente.cobrador = Cobradores[self.combo_cobrador.GetSelection()]; # Cambiamos el cobrador en el cliente
        self.cliente.cobrador.clientes.append(self.cliente) # Agregarmos el cliente al cobrador


        self.cliente.productos = self.new_productos
        self.cliente.comentarios = self.text_comentarios.GetValue()

        data.save()
        self.parent.update()
        self.unsetEditado(event)

    def OnCerrar(self, event): # wxGlade: ClienteFrame.<event_handler>
        
        if self.editado:
                dlg = wx.MessageDialog(self, 
                    "Desea salir sin guardar los cambios?",
                    "Salir?", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
                result = dlg.ShowModal()
                dlg.Destroy()

                if result == wx.ID_OK:
                        self.Destroy()
                else:
                        event.Veto()
        else:
                self.Destroy()

    def OnCambiarCobrador(self, event): # wxGlade: ClienteFrame.<event_handler>
        self.setEditado(event)

    def OnPagos(self, event): # wxGlade: ClienteFrame.<event_handler>
        pagos_frame = PagosFrame(self, -1, "")
        pagos_frame.SetCliente(self.cliente)
        pagos_frame.Show()

    def OnComentarios(self, event): # wxGlade: ClienteFrame.<event_handler>
        self.setEditado(event)

    def OnAgregarProducto(self, event): # wxGlade: ClienteFrame.<event_handler>

        agregar_producto_frame = ProductosFrame(self, -1, "")
        agregar_producto_frame.Show()

    def OnQuitarProducto(self, event): # wxGlade: ClienteFrame.<event_handler>

        dlg = wx.MessageDialog(self, 
            "Seguro que deseas eliminar este producto?",
            "Confirmar Quitar Producto", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
        result = dlg.ShowModal()
        dlg.Destroy()

        if result == wx.ID_OK:

                self.new_productos.remove(self.new_productos[self.list_productos.GetFocusedItem()])
                self.list_productos.DeleteItem(self.list_productos.GetFocusedItem())
                self.updateProductosList()
                
                self.setEditado(event)

# end of class ClienteFrame


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.FULL_REPAINT_ON_RESIZE|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        self.notebook_1 = wx.Notebook(self.panel_1, -1, style=0)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
        self.morosos_panel = wx.Panel(self.notebook_1, -1)
        self.todos_panel = wx.Panel(self.notebook_1, -1)
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        self.ArchivoMenu = wx.Menu()
        self.cargar_backup = wx.MenuItem(self.ArchivoMenu, wx.NewId(), "Cargar archivo de Backup", "", wx.ITEM_NORMAL)
        self.ArchivoMenu.AppendItem(self.cargar_backup)
        self.hacer_backup = wx.MenuItem(self.ArchivoMenu, wx.NewId(), "Hacer Backup", "", wx.ITEM_NORMAL)
        self.ArchivoMenu.AppendItem(self.hacer_backup)
        self.ArchivoMenu.AppendSeparator()
        self.salir = wx.MenuItem(self.ArchivoMenu, wx.NewId(), "Salir", "", wx.ITEM_NORMAL)
        self.ArchivoMenu.AppendItem(self.salir)
        self.frame_1_menubar.Append(self.ArchivoMenu, "Archivo")
        self.herramientas = wx.Menu()
        self.imprimir_planillas = wx.MenuItem(self.herramientas, wx.NewId(), "Imprimir Planillas", "Imprimir Planillas de Cobradores", wx.ITEM_NORMAL)
        self.herramientas.AppendItem(self.imprimir_planillas)
        self.cobradores = wx.MenuItem(self.herramientas, wx.NewId(), "Cobradores", "Administrar Cobradores", wx.ITEM_NORMAL)
        self.herramientas.AppendItem(self.cobradores)
        self.frame_1_menubar.Append(self.herramientas, "Herramientas")
        self.ayuda = wx.Menu()
        self.manual = wx.MenuItem(self.ayuda, wx.NewId(), "Manual del Usuario", "Abrir el Manual del Usuario", wx.ITEM_NORMAL)
        self.ayuda.AppendItem(self.manual)
        self.ayuda.AppendSeparator()
        self.acerca = wx.MenuItem(self.ayuda, wx.NewId(), "Acerca de", "Acerca de SGPD w3bex.com", wx.ITEM_NORMAL)
        self.ayuda.AppendItem(self.acerca)
        self.frame_1_menubar.Append(self.ayuda, "Ayuda")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        
        # Tool Bar
        self.frame_1_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_DOCKABLE)
        self.SetToolBar(self.frame_1_toolbar)
        self.frame_1_toolbar.AddLabelTool(1, "Nuevo Cliente", wx.Bitmap("img/new-client.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Agregar un Nuevo Cliente", "")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(2, "Imprimir Planillas", wx.Bitmap("img/print-list.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Imprimir Planillas de Cobro", "")
        self.frame_1_toolbar.AddLabelTool(3, "Cargar Planillas", wx.Bitmap("img/load-list.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Ingresar los datos de las Planillas de Cobro", "")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(4, "Generar Informe", wx.Bitmap("img/reports.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"Generar informe de saldos al día de hoy", "")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(5, "Cobradores", wx.Bitmap("img/cobradores.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Administrar Cobradores", "")
        self.frame_1_toolbar.AddSeparator()
        # Tool Bar end
        self.list_todos = AutoWidthList(self.todos_panel)
        self.list_inactivos = AutoWidthList(self.morosos_panel)
        self.list_morosos = AutoWidthList(self.notebook_1_pane_3)
        self.label_total = wx.StaticText(self.panel_1, -1, "TOTAL A COBRAR: $15350")
        self.static_line_2 = wx.StaticLine(self.panel_1, -1, style=wx.LI_VERTICAL)
        self.label_total_atrazado = wx.StaticText(self.panel_1, -1, "TOTAL ATRASADO: $654")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnCargarBackup, self.cargar_backup)
        self.Bind(wx.EVT_MENU, self.OnBackup, self.hacer_backup)
        self.Bind(wx.EVT_MENU, self.OnClose, self.salir)
        self.Bind(wx.EVT_MENU, self.OnImprimirPlanillas, self.imprimir_planillas)
        self.Bind(wx.EVT_MENU, self.OnOpenCobradores, self.cobradores)
        self.Bind(wx.EVT_MENU, self.OnManual, self.manual)
        self.Bind(wx.EVT_MENU, self.OnAbout, self.acerca)
        self.Bind(wx.EVT_TOOL, self.OnNewClient, id=1)
        self.Bind(wx.EVT_TOOL, self.OnImprimirPlanillas, id=2)
        self.Bind(wx.EVT_TOOL, self.OnCargarPlanillas, id=3)
        self.Bind(wx.EVT_TOOL, self.OnGenerarInformes, id=4)
        self.Bind(wx.EVT_TOOL, self.OnOpenCobradores, id=5)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivosListActivated, self.list_todos)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnInactivosListActivated, self.list_inactivos)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnMorososListActivated, self.list_morosos)
        # end wxGlade

        # Insertar columnas en las tablas, de la ventana Principal
        self.list_todos.InsertColumn(0, "Nro")
        self.list_todos.InsertColumn(1, "Cliente", width=300)
        self.list_todos.InsertColumn(2, "Productos")
        self.list_todos.InsertColumn(3, "Saldo", wx.LIST_FORMAT_RIGHT)

        self.list_inactivos.InsertColumn(0, "Nro")
        self.list_inactivos.InsertColumn(1, "Cliente", width=300)
        self.list_inactivos.InsertColumn(2, "Productos")
        self.list_inactivos.InsertColumn(3, "Saldo", wx.LIST_FORMAT_RIGHT)

        self.list_morosos.InsertColumn(0, "Nro")
        self.list_morosos.InsertColumn(1, "Cliente", width=300)
        self.list_morosos.InsertColumn(2, "Productos")
        self.list_morosos.InsertColumn(3, "Monto Atrasado", width=200)
        self.list_morosos.InsertColumn(4, "Saldo", wx.LIST_FORMAT_RIGHT)


        # Listas de clientes
        self.lmorosos = []
        self.lactivos = []
        self.linactivos = []

        self.setData()

    def setData(self):      
        # Cargar los datos en las listas
        global Clientes
        total = 0;
        total_atrasado = 0;

        self.lmorosos = []
        self.lactivos = []
        self.linactivos = []

        for i in Clientes:

                if i.saldo == 0:
                        self.linactivos.append(i)
                else:
                        self.lactivos.append(i)

                if i.esMoroso():
                        self.lmorosos.append(i)

        # FIX <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        for inactivo in self.linactivos:
                self.list_inactivos.InsertStringItem(self.linactivos.index(inactivo), str(inactivo.id))
                self.list_inactivos.SetStringItem(self.linactivos.index(inactivo), 1, inactivo.nombre)
                self.list_inactivos.SetStringItem(self.linactivos.index(inactivo), 2, str(len(inactivo.productos)))
                self.list_inactivos.SetStringItem(self.linactivos.index(inactivo), 3, "$%g" % inactivo.saldo)


        for activo in self.lactivos:
                self.list_todos.InsertStringItem(self.lactivos.index(activo), str(activo.id))
                self.list_todos.SetStringItem(self.lactivos.index(activo), 1, activo.nombre)
                self.list_todos.SetStringItem(self.lactivos.index(activo), 2, str(len(activo.productos)))
                self.list_todos.SetStringItem(self.lactivos.index(activo), 3, "$%g" % activo.saldo)
                total += activo.saldo

        for moroso in self.lmorosos:
                self.list_morosos.InsertStringItem(self.lmorosos.index(moroso), str(moroso.id))
                self.list_morosos.SetStringItem(self.lmorosos.index(moroso), 1, moroso.nombre)
                self.list_morosos.SetStringItem(self.lmorosos.index(moroso), 2, str(len(moroso.productos)))
                self.list_morosos.SetStringItem(self.lmorosos.index(moroso), 3, "$%g" % moroso.saldo_atrasado)
                self.list_morosos.SetStringItem(self.lmorosos.index(moroso), 4, "$%g" % moroso.saldo)
                total_atrasado += moroso.saldo_atrasado

                                        

        self.label_total.SetLabel("TOTAL A COBRAR: $%g" % total)
        self.label_total_atrazado.SetLabel("TOTAL ATRASADO $%g" % total_atrasado)


    def update(self):
        # renovamos las referencias a los objetos recargados...
        global Clientes, Cobradores, Pagos, data

        Clientes = data.objects['clientes']
        Cobradores = data.objects['cobradores']
        Pagos = data.objects['pagos']

        self.list_todos.DeleteAllItems()
        self.list_morosos.DeleteAllItems()
        self.list_inactivos.DeleteAllItems()
        self.setData()
        

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Sistema de Gestion de Pagos Diarios")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("img/app-icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((950, 613))
        self.SetBackgroundColour(wx.Colour(220, 218, 213))
        self.frame_1_toolbar.Realize()
        self.label_total.SetMinSize((400, 29))
        self.label_total.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_total_atrazado.SetMinSize((400, 29))
        self.label_total_atrazado.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_1_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_5_copy_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_5_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_5_copy.Add(self.list_todos, 1, wx.EXPAND, 0)
        self.todos_panel.SetSizer(sizer_5_copy)
        sizer_5_copy_copy.Add(self.list_inactivos, 1, wx.EXPAND, 0)
        self.morosos_panel.SetSizer(sizer_5_copy_copy)
        sizer_7.Add(self.list_morosos, 1, wx.EXPAND, 0)
        self.notebook_1_pane_3.SetSizer(sizer_7)
        self.notebook_1.AddPage(self.todos_panel, "Activos")
        self.notebook_1.AddPage(self.morosos_panel, "Inactivos")
        self.notebook_1.AddPage(self.notebook_1_pane_3, "Morosos")
        sizer_1_copy.Add(self.notebook_1, 1, wx.ALL|wx.EXPAND, 3)
        sizer_6.Add(self.label_total, 1, wx.ALL, 20)
        sizer_6.Add(self.static_line_2, 0, wx.EXPAND, 0)
        sizer_6.Add(self.label_total_atrazado, 1, wx.ALL, 20)
        sizer_1_copy.Add(sizer_6, 0, 0, 0)
        self.panel_1.SetSizer(sizer_1_copy)
        sizer_5.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_5)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnManual(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnManual' not implemented!"
        event.Skip()

    def OnAbout(self, event): # wxGlade: MyFrame.<event_handler>
        frame_about = AboutFrame(self, -1, "")
        frame_about.Show()

    def OnNewClient(self, event): # wxGlade: MyFrame.<event_handler>
        nuevo_cliente_frame = NuevoClienteFrame(self, -1, "")
        nuevo_cliente_frame.Show()
        

    def OnImprimirPlanillas(self, event): # wxGlade: MyFrame.<event_handler>
        imprimir_planillas = ImprimirPlanillasFrame(self, -1, "")
        imprimir_planillas.Show()

    def OnCargarPlanillas(self, event): # wxGlade: MyFrame.<event_handler>
        cargar_planillas_frame = CargarPlanillasFrame(self, -1, "")
        cargar_planillas_frame.Show()

    def OnOpenPlanes(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnOpenPlanes' not implemented!"
        event.Skip()

    def OnOpenCobradores(self, event): # wxGlade: MyFrame.<event_handler>
        
        cobradores_frame = CobradoresFrame(self, -1, "")
        cobradores_frame.Show()

    def OnHoyEsFeriado(self, event): # wxGlade: MyFrame.<event_handler>
        pass

    def OnGenerarInformes(self, event): # wxGlade: MyFrame.<event_handler>

        msj = "Realmente desea imprimir informes de Clientes?"
        confirmar_dialog = wx.MessageDialog(self, msj, "Imprimir informes")
        if confirmar_dialog.ShowModal() == wx.ID_OK:
                # Imprimir informes de clientes, y morosos.
                global Clientes
                informe = printer.InformeSaldos(Clientes)
                informe.Imprimir()
                informe_morosos = printer.InformeSaldosAtrasados(Clientes)
                informe_morosos.Imprimir()

    def OnClientListActivated(self, event): # wxGlade: MyFrame.<event_handler>
        #print event.GetColumn()
        #print event.GetIndex()
        client_frame = ClienteFrame(self, -1, "")
        client_frame.setCliente(Clientes[event.GetIndex()])
        client_frame.Show()


    def OnCargarBackup(self, event): # wxGlade: MyFrame.<event_handler>
        
        # Abrir dialogo para elegir un archivo de backup..

        file_dialog = wx.FileDialog(self, style = wx.OPEN)
        file_dialog.SetWildcard("Archivos de Backup (*.bak)|*.bak|Todos los archivos (*.*)|*.*")
        if file_dialog.ShowModal() == wx.ID_OK:
                data.load(backup=file_dialog.GetPath())

                self.update()

                msgbox = wx.MessageDialog(self, "El archivo de backup se ha cargado satisfactoriamente.", "INFO", style=wx.ICON_INFORMATION)
                msgbox.ShowModal()

        

    def OnBackup(self, event): # wxGlade: MyFrame.<event_handler>
        
        # Abrir dialogo para seleccionar ruta de destino del archivo de backup

        file_dialog = wx.FileDialog(self, style = wx.SAVE)
        d = datetime.date.today()
        filename = "%s-%s-%s-backup.bak" % (d.day, d.month, d.year)
        file_dialog.SetFilename(filename)
        file_dialog.SetWildcard("Archivos de Backup (*.bak)|*.bak|Todos los archivos (*.*)|*.*")
        if file_dialog.ShowModal() == wx.ID_OK:
                data.backup(file_dialog.GetPath())
                msgbox = wx.MessageDialog(self, "Archivo de backup creado satisfactoriamente.", "INFO", style=wx.ICON_INFORMATION)
                msgbox.ShowModal()


    def OnClose(self, event): # wxGlade: MyFrame.<event_handler>
        self.Close()

    def OnActivosListActivated(self, event): # wxGlade: MyFrame.<event_handler>
        client_frame = ClienteFrame(self, -1, "")
        client_frame.setCliente(self.lactivos[event.GetIndex()])
        client_frame.Show()

    def OnInactivosListActivated(self, event): # wxGlade: MyFrame.<event_handler>
        client_frame = ClienteFrame(self, -1, "")
        client_frame.setCliente(self.linactivos[event.GetIndex()])
        client_frame.Show()

    def OnMorososListActivated(self, event): # wxGlade: MyFrame.<event_handler>
        client_frame = ClienteFrame(self, -1, "")
        client_frame.setCliente(self.lmorosos[event.GetIndex()])
        client_frame.Show()

# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    main_frame = MyFrame(None, -1, "")
    app.SetTopWindow(main_frame)
    main_frame.Show()
    app.MainLoop()
